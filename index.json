{
  "api/Bannerlord.UIExtenderEx.Attributes.BaseUIExtenderAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.BaseUIExtenderAttribute.html",
    "title": "Class BaseUIExtenderAttribute | UIExtenderEx Documentation",
    "keywords": "Class BaseUIExtenderAttribute Base class for extensions attributes Inheritance Object Attribute BaseUIExtenderAttribute PrefabExtensionAttribute ViewModelMixinAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Attributes Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class BaseUIExtenderAttribute : Attribute, _Attribute"
  },
  "api/Bannerlord.UIExtenderEx.Attributes.DataSourceMethodAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.DataSourceMethodAttribute.html",
    "title": "Class DataSourceMethodAttribute | UIExtenderEx Documentation",
    "keywords": "Class DataSourceMethodAttribute Attribute for mixin methods to be added to view models. Only methods specified by this attribute will actually end up in extended view model Inheritance Object Attribute DataSourceMethodAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Attributes Assembly : Bannerlord.UIExtenderEx.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public sealed class DataSourceMethodAttribute : Attribute, _Attribute"
  },
  "api/Bannerlord.UIExtenderEx.Attributes.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.html",
    "title": "Namespace Bannerlord.UIExtenderEx.Attributes | UIExtenderEx Documentation",
    "keywords": "Namespace Bannerlord.UIExtenderEx.Attributes Classes BaseUIExtenderAttribute Base class for extensions attributes DataSourceMethodAttribute Attribute for mixin methods to be added to view models. Only methods specified by this attribute will actually end up in extended view model PrefabExtensionAttribute Attribute for prefab XML extensions. Extension classes should inherit from one of the IPrefabPatch base classes and should be marked with this attribute ViewModelMixinAttribute"
  },
  "api/Bannerlord.UIExtenderEx.Attributes.PrefabExtensionAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.PrefabExtensionAttribute.html",
    "title": "Class PrefabExtensionAttribute | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionAttribute Attribute for prefab XML extensions. Extension classes should inherit from one of the IPrefabPatch base classes and should be marked with this attribute Inheritance Object Attribute BaseUIExtenderAttribute PrefabExtensionAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Attributes Assembly : Bannerlord.UIExtenderEx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class PrefabExtensionAttribute : BaseUIExtenderAttribute, _Attribute Constructors PrefabExtensionAttribute(String, String) Constructor Declaration public PrefabExtensionAttribute(string movie, string xpath = null) Parameters String movie Gauntlet Movie name to extend String xpath XPath of the node to operate against (optional) PrefabExtensionAttribute(String, String, String) Constructor Declaration public PrefabExtensionAttribute(string movie, string xpath = null, string autoGenWidgetName = null) Parameters String movie Gauntlet Movie name to extend String xpath XPath of the node to operate against (optional) String autoGenWidgetName Gauntlet Movie name to prevent from loading as an auto-generated Widget (optional) Properties AutoGenWidgetName Gauntlet Movie name to prevent from loading as an auto-generated Widget (optional) Declaration [Obsolete(\"AutoGens are globally disabled for now. When the game will be released on Linux/OSX we'll reuse this property again.\")] public string AutoGenWidgetName { get; } Property Value String Movie Gauntlet Movie name to extend Declaration public string Movie { get; } Property Value String XPath XPath of the node to operate against (optional) Declaration public string XPath { get; } Property Value String"
  },
  "api/Bannerlord.UIExtenderEx.Attributes.ViewModelMixinAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.ViewModelMixinAttribute.html",
    "title": "Class ViewModelMixinAttribute | UIExtenderEx Documentation",
    "keywords": "Class ViewModelMixinAttribute Inheritance Object Attribute BaseUIExtenderAttribute ViewModelMixinAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Attributes Assembly : Bannerlord.UIExtenderEx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class ViewModelMixinAttribute : BaseUIExtenderAttribute, _Attribute Constructors ViewModelMixinAttribute() Declaration public ViewModelMixinAttribute() ViewModelMixinAttribute(Boolean) Declaration public ViewModelMixinAttribute(bool handleDerived) Parameters Boolean handleDerived ViewModelMixinAttribute(String) Declaration public ViewModelMixinAttribute(string refreshMethodName) Parameters String refreshMethodName ViewModelMixinAttribute(String, Boolean) Declaration public ViewModelMixinAttribute(string refreshMethodName = null, bool handleDerived = false) Parameters String refreshMethodName Boolean handleDerived Properties HandleDerived Declaration public bool HandleDerived { get; } Property Value Boolean RefreshMethodName Declaration public string RefreshMethodName { get; } Property Value String"
  },
  "api/Bannerlord.UIExtenderEx.html": {
    "href": "api/Bannerlord.UIExtenderEx.html",
    "title": "Namespace Bannerlord.UIExtenderEx | UIExtenderEx Documentation",
    "keywords": "Namespace Bannerlord.UIExtenderEx Classes SubModule UIExtender Client class instance of which should be created for each module using this library"
  },
  "api/Bannerlord.UIExtenderEx.Patches.html": {
    "href": "api/Bannerlord.UIExtenderEx.Patches.html",
    "title": "Namespace Bannerlord.UIExtenderEx.Patches | UIExtenderEx Documentation",
    "keywords": "Namespace Bannerlord.UIExtenderEx.Patches Classes WidgetFactoryPatch Skips type duplicates"
  },
  "api/Bannerlord.UIExtenderEx.Patches.WidgetFactoryPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Patches.WidgetFactoryPatch.html",
    "title": "Class WidgetFactoryPatch | UIExtenderEx Documentation",
    "keywords": "Class WidgetFactoryPatch Skips type duplicates Inheritance Object WidgetFactoryPatch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Patches Assembly : Bannerlord.UIExtenderEx.dll Syntax public static class WidgetFactoryPatch Methods Patch(Harmony) Declaration public static void Patch(Harmony harmony) Parameters Harmony harmony"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.CustomPatch-1.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.CustomPatch-1.html",
    "title": "Class CustomPatch<T> | UIExtenderEx Documentation",
    "keywords": "Class CustomPatch<T> Custom patch on either whole XmlDocument (if T is XmlDocument) or Xpath specified node (if XmlNode is the generic argument) Inheritance Object CustomPatch<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class CustomPatch<T> : IPrefabPatch where T : XmlNode Type Parameters T Properties Id Declaration public abstract string Id { get; } Property Value String Implements IPrefabPatch.Id Methods Apply(T) Apply this patch to obj Declaration public abstract void Apply(T obj) Parameters T obj"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.EmbedPrefabExtensionInsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.EmbedPrefabExtensionInsertPatch.html",
    "title": "Class EmbedPrefabExtensionInsertPatch | UIExtenderEx Documentation",
    "keywords": "Class EmbedPrefabExtensionInsertPatch Inheritance Object InsertPatch PrefabExtensionInsertPatch EmbedPrefabExtensionInsertPatch Inherited Members InsertPatch.PositionFirst InsertPatch.PositionLast InsertPatch.Id InsertPatch.Position Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class EmbedPrefabExtensionInsertPatch : PrefabExtensionInsertPatch, IPrefabPatch Constructors EmbedPrefabExtensionInsertPatch(Assembly, String) Declaration protected EmbedPrefabExtensionInsertPatch(Assembly assembly, string path) Parameters Assembly assembly String path Methods GetPrefabExtension() Declaration public override XmlDocument GetPrefabExtension() Returns XmlDocument Overrides InsertPatch.GetPrefabExtension()"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.html",
    "title": "Namespace Bannerlord.UIExtenderEx.Prefabs | UIExtenderEx Documentation",
    "keywords": "Namespace Bannerlord.UIExtenderEx.Prefabs Classes CustomPatch<T> Custom patch on either whole XmlDocument (if T is XmlDocument) or Xpath specified node (if XmlNode is the generic argument) EmbedPrefabExtensionInsertPatch InsertPatch Base class for insert patches ModulePrefabExtensionInsertPatch Patch that inserts prefab extension (specified by Name ) as a child in XPath specified node, at specific position ( Position property) Extension snippet should be named as {Name}.xml and located at module's GUI/PrefabExtensions folder. PrefabExtensionInsertAsSiblingPatch Patch that inserts prefab extension as a sibling to node specified by Xpath. Order is controlled by Type property. PrefabExtensionInsertPatch Patch that inserts prefab extension (specified by Name ) as a child in XPath specified node, at specific position ( Position property) PrefabExtensionReplacePatch Patch that replaces node specified by XPath with node from prefab extension PrefabExtensionSetAttributePatch Patch that adds or replaces node's attribute specified by XPath with node from prefab extension Interfaces IPrefabPatch General interface for XML prefab patch Enums PrefabExtensionInsertAsSiblingPatch.InsertType Insert type enum - Prepend inserts snippet before sibling, Append - after"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.InsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.InsertPatch.html",
    "title": "Class InsertPatch | UIExtenderEx Documentation",
    "keywords": "Class InsertPatch Base class for insert patches Inheritance Object InsertPatch PrefabExtensionInsertPatch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class InsertPatch : IPrefabPatch Fields PositionFirst Constant that will insert snippet at the very beginning Declaration public const int PositionFirst = 0 Field Value Int32 PositionLast Constant that will insert snippet at the very end Declaration public const int PositionLast = 2147483647 Field Value Int32 Properties Id Declaration public abstract string Id { get; } Property Value String Implements IPrefabPatch.Id Position Position to insert snippet at Declaration public abstract int Position { get; } Property Value Int32 Methods GetPrefabExtension() Declaration public abstract XmlDocument GetPrefabExtension() Returns XmlDocument"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.IPrefabPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.IPrefabPatch.html",
    "title": "Interface IPrefabPatch | UIExtenderEx Documentation",
    "keywords": "Interface IPrefabPatch General interface for XML prefab patch Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public interface IPrefabPatch Properties Id Declaration string Id { get; } Property Value String"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.ModulePrefabExtensionInsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.ModulePrefabExtensionInsertPatch.html",
    "title": "Class ModulePrefabExtensionInsertPatch | UIExtenderEx Documentation",
    "keywords": "Class ModulePrefabExtensionInsertPatch Patch that inserts prefab extension (specified by Name ) as a child in XPath specified node, at specific position ( Position property) Extension snippet should be named as {Name}.xml and located at module's GUI/PrefabExtensions folder. Inheritance Object InsertPatch PrefabExtensionInsertPatch ModulePrefabExtensionInsertPatch Inherited Members InsertPatch.PositionFirst InsertPatch.PositionLast InsertPatch.Id InsertPatch.Position Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax [Obsolete(\"Use Prefabs2.PrefabExtensionInsertPatch instead.\")] public abstract class ModulePrefabExtensionInsertPatch : PrefabExtensionInsertPatch, IPrefabPatch Constructors ModulePrefabExtensionInsertPatch(String, String) Declaration protected ModulePrefabExtensionInsertPatch(string name, string moduleName) Parameters String name String moduleName Methods GetPrefabExtension() Declaration public override XmlDocument GetPrefabExtension() Returns XmlDocument Overrides InsertPatch.GetPrefabExtension()"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertAsSiblingPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertAsSiblingPatch.html",
    "title": "Class PrefabExtensionInsertAsSiblingPatch | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionInsertAsSiblingPatch Patch that inserts prefab extension as a sibling to node specified by Xpath. Order is controlled by Type property. Inheritance Object PrefabExtensionInsertAsSiblingPatch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class PrefabExtensionInsertAsSiblingPatch : IPrefabPatch Properties Id Name of the extension snippet, without .xml Declaration public abstract string Id { get; } Property Value String Implements IPrefabPatch.Id Type Type of the insert Declaration public virtual PrefabExtensionInsertAsSiblingPatch.InsertType Type { get; } Property Value PrefabExtensionInsertAsSiblingPatch.InsertType Methods GetPrefabExtension() Declaration public abstract XmlDocument GetPrefabExtension() Returns XmlDocument"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertAsSiblingPatch.InsertType.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertAsSiblingPatch.InsertType.html",
    "title": "Enum PrefabExtensionInsertAsSiblingPatch.InsertType | UIExtenderEx Documentation",
    "keywords": "Enum PrefabExtensionInsertAsSiblingPatch.InsertType Insert type enum - Prepend inserts snippet before sibling, Append - after Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public enum InsertType Append Prepend"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertPatch.html",
    "title": "Class PrefabExtensionInsertPatch | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionInsertPatch Patch that inserts prefab extension (specified by Name ) as a child in XPath specified node, at specific position ( Position property) Inheritance Object InsertPatch PrefabExtensionInsertPatch EmbedPrefabExtensionInsertPatch ModulePrefabExtensionInsertPatch Inherited Members InsertPatch.PositionFirst InsertPatch.PositionLast InsertPatch.Id InsertPatch.Position InsertPatch.GetPrefabExtension() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax [Obsolete(\"Use Prefabs2.PrefabExtensionInsertPatch instead.\")] public abstract class PrefabExtensionInsertPatch : InsertPatch, IPrefabPatch"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionReplacePatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionReplacePatch.html",
    "title": "Class PrefabExtensionReplacePatch | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionReplacePatch Patch that replaces node specified by XPath with node from prefab extension Inheritance Object PrefabExtensionReplacePatch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class PrefabExtensionReplacePatch : IPrefabPatch Properties Id Name of the extension snippet, without .xml Declaration public abstract string Id { get; } Property Value String Implements IPrefabPatch.Id Methods GetPrefabExtension() Declaration public abstract XmlDocument GetPrefabExtension() Returns XmlDocument"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionSetAttributePatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionSetAttributePatch.html",
    "title": "Class PrefabExtensionSetAttributePatch | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionSetAttributePatch Patch that adds or replaces node's attribute specified by XPath with node from prefab extension Inheritance Object PrefabExtensionSetAttributePatch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class PrefabExtensionSetAttributePatch : IPrefabPatch Properties Attribute Declaration public abstract string Attribute { get; } Property Value String Id Name of the extension snippet, without .xml Declaration public abstract string Id { get; } Property Value String Implements IPrefabPatch.Id Value Declaration public abstract string Value { get; } Property Value String"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.html",
    "title": "Namespace Bannerlord.UIExtenderEx.Prefabs2 | UIExtenderEx Documentation",
    "keywords": "Namespace Bannerlord.UIExtenderEx.Prefabs2 Classes PrefabExtensionInsertPatch Patch that inserts Content relative to the target node specified in the XPath property. A single Method or Property should be flagged with the PrefabExtensionInsertPatch.PrefabExtensionContentAttribute . Content Attribute Types: PrefabExtensionInsertPatch.PrefabExtensionContentAttribute Used on a single Property or Method in PrefabExtensionInsertPatch to flag it as containing the patch information. Supported Types: String Represents either the name of a file (use PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute ), or xml (use PrefabExtensionInsertPatch.PrefabExtensionTextAttribute ). XmlDocument Use PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute . The root node of the document and all of its children will be inserted at the target location. XmlNode Use PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute . The node and all of its children will be inserted at the target location. IEnumerable<T> of type XmlNode Use PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute . Nodes will be inserted in the same order that they appear in this list at the target location. PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute Used when Content is of type string and refers to a file name. The file should have an extension of type .xml, and be located inside of the GUI folder of your module. You can include or omit the extension type. I.e. both of the following will work: YourPatchFileName YourPatchFileName.xml See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for info on other attribute types. PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute PrefabExtensionInsertPatch.PrefabExtensionTextAttribute Use when the property or return of your method is of type String and is xml. The xml must be properly formatted with a single root node. If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute Use when the property or return of your method is of type XmlDocument . If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute Use when the property or return of your method is of type XmlNode . The node and all of its children will be inserted at the target location. If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute Use when the property or return of your method is of type IEnumerable{ XmlNode }. Nodes will be inserted in the same order that they appear in this list at the target location. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. PrefabExtensionSetAttributePatch Patch that adds or replaces node's attributes specified by XPath with node from prefab extension Structs PrefabExtensionSetAttributePatch.Attribute Enums InsertType"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.InsertType.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.InsertType.html",
    "title": "Enum InsertType | UIExtenderEx Documentation",
    "keywords": "Enum InsertType Namespace : Bannerlord.UIExtenderEx.Prefabs2 Assembly : Bannerlord.UIExtenderEx.dll Syntax public enum InsertType Append Child Prepend Remove Replace ReplaceKeepChildren"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.html",
    "title": "Class PrefabExtensionInsertPatch | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionInsertPatch Patch that inserts Content relative to the target node specified in the XPath property. A single Method or Property should be flagged with the PrefabExtensionInsertPatch.PrefabExtensionContentAttribute . Content Attribute Types: Inheritance Object PrefabExtensionInsertPatch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs2 Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class PrefabExtensionInsertPatch Properties Index Only used when Type is set to Child or ReplaceKeepChildren . See Type for more details. Declaration public virtual int Index { get; } Property Value Int32 Type InsertType specifies the placement of the content flagged by your PrefabExtensionInsertPatch.PrefabExtensionContentAttribute relative to the target node specified in the XPath property. Insertion Methods Prepend Content is placed before the target node at the same height (siblings). ReplaceKeepChildren Target node is replaced with the new Content. The children of the original node are added as children to the newly inserted Content. If Content represents more than one root node, Index will be used to specify which new node should inherit the children. Replace Target node and all of its children are replaced with the new Content. Child Content is inserted as a child (children) of the target node. If the target node has children, Index will be used to place the new nodes relative to the pre-existing children. Append Content is placed after the target node at the same height (siblings). Remove Removes the node. Declaration public abstract InsertType Type { get; } Property Value InsertType"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionContentAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionContentAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionContentAttribute | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionInsertPatch.PrefabExtensionContentAttribute Used on a single Property or Method in PrefabExtensionInsertPatch to flag it as containing the patch information. Supported Types: String Represents either the name of a file (use PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute ), or xml (use PrefabExtensionInsertPatch.PrefabExtensionTextAttribute ). XmlDocument Use PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute . The root node of the document and all of its children will be inserted at the target location. XmlNode Use PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute . The node and all of its children will be inserted at the target location. IEnumerable<T> of type XmlNode Use PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute . Nodes will be inserted in the same order that they appear in this list at the target location. Inheritance Object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs2 Assembly : Bannerlord.UIExtenderEx.dll Syntax [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property)] protected abstract class PrefabExtensionContentAttribute : Attribute, _Attribute"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute Used when Content is of type string and refers to a file name. The file should have an extension of type .xml, and be located inside of the GUI folder of your module. You can include or omit the extension type. I.e. both of the following will work: YourPatchFileName YourPatchFileName.xml See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for info on other attribute types. Inheritance Object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute Inherited Members PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute.RemoveRootNode Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs2 Assembly : Bannerlord.UIExtenderEx.dll Syntax protected sealed class PrefabExtensionFileNameAttribute : PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute, _Attribute Constructors PrefabExtensionFileNameAttribute(Boolean) Declaration public PrefabExtensionFileNameAttribute(bool removeRootNode = false) Parameters Boolean removeRootNode"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute Inheritance Object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute PrefabExtensionInsertPatch.PrefabExtensionTextAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs2 Assembly : Bannerlord.UIExtenderEx.dll Syntax protected abstract class PrefabExtensionSingleContentAttribute : PrefabExtensionInsertPatch.PrefabExtensionContentAttribute, _Attribute Constructors PrefabExtensionSingleContentAttribute(Boolean) Declaration protected PrefabExtensionSingleContentAttribute(bool removeRootNode) Parameters Boolean removeRootNode If set to true, the root node of will be removed. This is useful when you wish to insert multiple nodes at the same level (as siblings) from a single patch. Properties RemoveRootNode If set to true, the root node of Content will be removed. This is useful when you wish to insert multiple nodes at the same level (as siblings) from a single patch. Declaration public bool RemoveRootNode { get; } Property Value Boolean"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionTextAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionTextAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionTextAttribute | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionInsertPatch.PrefabExtensionTextAttribute Use when the property or return of your method is of type String and is xml. The xml must be properly formatted with a single root node. If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. Inheritance Object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute PrefabExtensionInsertPatch.PrefabExtensionTextAttribute Inherited Members PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute.RemoveRootNode Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs2 Assembly : Bannerlord.UIExtenderEx.dll Syntax protected sealed class PrefabExtensionTextAttribute : PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute, _Attribute Constructors PrefabExtensionTextAttribute(Boolean) Declaration public PrefabExtensionTextAttribute(bool removeRootNode = false) Parameters Boolean removeRootNode"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute Use when the property or return of your method is of type XmlDocument . If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. Inheritance Object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute Inherited Members PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute.RemoveRootNode Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs2 Assembly : Bannerlord.UIExtenderEx.dll Syntax protected sealed class PrefabExtensionXmlDocumentAttribute : PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute, _Attribute Constructors PrefabExtensionXmlDocumentAttribute(Boolean) Declaration public PrefabExtensionXmlDocumentAttribute(bool removeRootNode = false) Parameters Boolean removeRootNode"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute Use when the property or return of your method is of type XmlNode . The node and all of its children will be inserted at the target location. If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. Inheritance Object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute Inherited Members PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute.RemoveRootNode Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs2 Assembly : Bannerlord.UIExtenderEx.dll Syntax protected sealed class PrefabExtensionXmlNodeAttribute : PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute, _Attribute Constructors PrefabExtensionXmlNodeAttribute(Boolean) Declaration public PrefabExtensionXmlNodeAttribute(bool removeRootNode = false) Parameters Boolean removeRootNode"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute Use when the property or return of your method is of type IEnumerable{ XmlNode }. Nodes will be inserted in the same order that they appear in this list at the target location. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. Inheritance Object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs2 Assembly : Bannerlord.UIExtenderEx.dll Syntax protected sealed class PrefabExtensionXmlNodesAttribute : PrefabExtensionInsertPatch.PrefabExtensionContentAttribute, _Attribute"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionSetAttributePatch.Attribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionSetAttributePatch.Attribute.html",
    "title": "Struct PrefabExtensionSetAttributePatch.Attribute | UIExtenderEx Documentation",
    "keywords": "Struct PrefabExtensionSetAttributePatch.Attribute Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bannerlord.UIExtenderEx.Prefabs2 Assembly : Bannerlord.UIExtenderEx.dll Syntax public readonly struct Attribute Constructors Attribute(String, String) Declaration public Attribute(string name, string value) Parameters String name String value Properties Name Declaration public readonly string Name { get; } Property Value String Value Declaration public readonly string Value { get; } Property Value String"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionSetAttributePatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionSetAttributePatch.html",
    "title": "Class PrefabExtensionSetAttributePatch | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionSetAttributePatch Patch that adds or replaces node's attributes specified by XPath with node from prefab extension Inheritance Object PrefabExtensionSetAttributePatch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs2 Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class PrefabExtensionSetAttributePatch Properties Attributes Declaration public abstract List<PrefabExtensionSetAttributePatch.Attribute> Attributes { get; } Property Value List < PrefabExtensionSetAttributePatch.Attribute >"
  },
  "api/Bannerlord.UIExtenderEx.ResourceManager.BrushFactoryManager.html": {
    "href": "api/Bannerlord.UIExtenderEx.ResourceManager.BrushFactoryManager.html",
    "title": "Class BrushFactoryManager | UIExtenderEx Documentation",
    "keywords": "Class BrushFactoryManager Inheritance Object BrushFactoryManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.ResourceManager Assembly : Bannerlord.UIExtenderEx.dll Syntax public static class BrushFactoryManager Methods Create(XmlDocument) Declaration public static IEnumerable<Brush> Create(XmlDocument xmlDocument) Parameters XmlDocument xmlDocument Returns IEnumerable < Brush > CreateAndRegister(XmlDocument) Declaration public static void CreateAndRegister(XmlDocument xmlDocument) Parameters XmlDocument xmlDocument Register(IEnumerable<Brush>) Declaration public static void Register(IEnumerable<Brush> brushes) Parameters IEnumerable < Brush > brushes"
  },
  "api/Bannerlord.UIExtenderEx.ResourceManager.html": {
    "href": "api/Bannerlord.UIExtenderEx.ResourceManager.html",
    "title": "Namespace Bannerlord.UIExtenderEx.ResourceManager | UIExtenderEx Documentation",
    "keywords": "Namespace Bannerlord.UIExtenderEx.ResourceManager Classes BrushFactoryManager WidgetFactoryManager"
  },
  "api/Bannerlord.UIExtenderEx.ResourceManager.WidgetFactoryManager.html": {
    "href": "api/Bannerlord.UIExtenderEx.ResourceManager.WidgetFactoryManager.html",
    "title": "Class WidgetFactoryManager | UIExtenderEx Documentation",
    "keywords": "Class WidgetFactoryManager Inheritance Object WidgetFactoryManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.ResourceManager Assembly : Bannerlord.UIExtenderEx.dll Syntax public static class WidgetFactoryManager Methods Create(XmlDocument) Declaration public static WidgetPrefab Create(XmlDocument doc) Parameters XmlDocument doc Returns WidgetPrefab CreateAndRegister(String, XmlDocument) Declaration public static void CreateAndRegister(string name, XmlDocument xmlDocument) Parameters String name XmlDocument xmlDocument Register(String, Func<Nullable<WidgetPrefab>>) Declaration public static void Register(string name, Func<WidgetPrefab?> create) Parameters String name Func < Nullable < WidgetPrefab >> create Register(Type) Declaration public static void Register(Type widgetType) Parameters Type widgetType"
  },
  "api/Bannerlord.UIExtenderEx.SubModule.html": {
    "href": "api/Bannerlord.UIExtenderEx.SubModule.html",
    "title": "Class SubModule | UIExtenderEx Documentation",
    "keywords": "Class SubModule Inheritance Object SubModule Namespace : Bannerlord.UIExtenderEx Assembly : Bannerlord.UIExtenderEx.dll Syntax public class SubModule : MBSubModuleBase Constructors SubModule() Declaration public SubModule()"
  },
  "api/Bannerlord.UIExtenderEx.UIExtender.html": {
    "href": "api/Bannerlord.UIExtenderEx.UIExtender.html",
    "title": "Class UIExtender | UIExtenderEx Documentation",
    "keywords": "Class UIExtender Client class instance of which should be created for each module using this library Inheritance Object UIExtender Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx Assembly : Bannerlord.UIExtenderEx.dll Syntax public class UIExtender Constructors UIExtender(String) Default constructor. moduleName should match module folder because it will be used to look-up resources Declaration public UIExtender(string moduleName) Parameters String moduleName Module name, should match module folder Methods Disable() Declaration public void Disable() Enable() Declaration public void Enable() Register() Obsolete. Use Register(Assembly) . Declaration [Obsolete(\"Use explicit call Register(Assembly)\", true)] public void Register() Register(IEnumerable<Type>) Register extension types Should be called during OnSubModuleLoad Declaration public void Register(IEnumerable<Type> types) Parameters IEnumerable < Type > types Register(Assembly) Register extension types from specified assembly Should be called during OnSubModuleLoad Declaration public void Register(Assembly assembly) Parameters Assembly assembly"
  },
  "api/Bannerlord.UIExtenderEx.ViewModels.BaseViewModelMixin-1.html": {
    "href": "api/Bannerlord.UIExtenderEx.ViewModels.BaseViewModelMixin-1.html",
    "title": "Class BaseViewModelMixin<TViewModel> | UIExtenderEx Documentation",
    "keywords": "Class BaseViewModelMixin<TViewModel> Base class for ViewModelMixin. Generic parameter T will be used to determine which VM to extend. You can use protected _vm to access fields of the original view model. Inheritance Object BaseViewModelMixin<TViewModel> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.ViewModels Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class BaseViewModelMixin<TViewModel> : IViewModelMixin where TViewModel : TaleWorlds.Library.ViewModel Type Parameters TViewModel child of ViewModel this mixin is extending Constructors BaseViewModelMixin(TViewModel) Declaration protected BaseViewModelMixin(TViewModel vm) Parameters TViewModel vm Properties ViewModel Declaration protected TViewModel ViewModel { get; } Property Value TViewModel Methods GetPrivate<TValue>(String) Helper method to get private value from attached view model instance Declaration protected TValue GetPrivate<TValue>(string name) Parameters String name name of the field Returns TValue Type Parameters TValue type OnFinalize() Called when ViewModel's OnFinalized called (supported on models game actually call OnFinalized ). Defaults to empty method. Declaration public virtual void OnFinalize() Implements IViewModelMixin.OnFinalize() OnRefresh() Called when ViewModel is refreshed (specifics are based on ViewModel patch). Defaults to empty method. Declaration public virtual void OnRefresh() Implements IViewModelMixin.OnRefresh() SetPrivate<TValue>(String, TValue) Helper method to set private value of attached view model instance Declaration protected void SetPrivate<TValue>(string name, TValue value) Parameters String name name of the field TValue value new value Type Parameters TValue type"
  },
  "api/Bannerlord.UIExtenderEx.ViewModels.html": {
    "href": "api/Bannerlord.UIExtenderEx.ViewModels.html",
    "title": "Namespace Bannerlord.UIExtenderEx.ViewModels | UIExtenderEx Documentation",
    "keywords": "Namespace Bannerlord.UIExtenderEx.ViewModels Classes BaseViewModelMixin<TViewModel> Base class for ViewModelMixin. Generic parameter T will be used to determine which VM to extend. You can use protected _vm to access fields of the original view model. Interfaces IViewModelMixin Interface for ViewModel mixins Should not be used directly, ViewModelMixin should be used as base class"
  },
  "api/Bannerlord.UIExtenderEx.ViewModels.IViewModelMixin.html": {
    "href": "api/Bannerlord.UIExtenderEx.ViewModels.IViewModelMixin.html",
    "title": "Interface IViewModelMixin | UIExtenderEx Documentation",
    "keywords": "Interface IViewModelMixin Interface for ViewModel mixins Should not be used directly, ViewModelMixin should be used as base class Namespace : Bannerlord.UIExtenderEx.ViewModels Assembly : Bannerlord.UIExtenderEx.dll Syntax public interface IViewModelMixin Methods OnFinalize() Called when ViewModel's OnFinalized called (supported on models game actually call OnFinalized ) Declaration void OnFinalize() OnRefresh() Called when ViewModel is refreshed (specifics are based on ViewModel patch) Declaration void OnRefresh()"
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "| UIExtenderEx Documentation",
    "keywords": ""
  },
  "articles/v1/Overview.html": {
    "href": "articles/v1/Overview.html",
    "title": "v1 Documentation | UIExtenderEx Documentation",
    "keywords": "v1 Documentation If possible, it is recommended to now use the PrefabsV2 API. Quickstart You mark your prefab extensions based on one of the IPrefabPatch descendants and marking it with PrefabExtension attribute, therefore enabling you to make additions to the specified Movie's XML data. Example of inserting XML at a specific position: [PrefabExtension(\"Insert\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children\")] internal class TestPrefabExtensionInsertPatch : PrefabExtensionInsertPatch { public override string Id => \"Insert\"; public override int Position => 3; private XmlDocument XmlDocument { get; } = new XmlDocument(); public TestPrefabExtensionInsertPatch() { XmlDocument.LoadXml(\"<OptionsTabToggle Id=\\\"Insert\\\" />\"); } public override XmlDocument GetPrefabExtension() => XmlDocument; } Example of replacing XML : [PrefabExtension(\"Replace\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children/OptionsTabToggle[@Id='Replace']\")] internal class TestPrefabExtensionReplacePatch : PrefabExtensionReplacePatch { public override string Id => \"Replace\"; private XmlDocument XmlDocument { get; } = new XmlDocument(); public TestPrefabExtensionReplacePatch() { XmlDocument.LoadXml(\"<OptionsTabToggle Id=\\\"Replaced\\\" />\"); } public override XmlDocument GetPrefabExtension() => XmlDocument; } Example of inserting XML after a specific element: [PrefabExtension(\"InsertAsSiblingAppend\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children/OptionsTabToggle[@Id='InsertAsSibling']\")] internal class TestPrefabExtensionInsertAsSiblingAppendPatch : PrefabExtensionInsertAsSiblingPatch { public override string Id => \"InsertAsSiblingAppend\"; public override InsertType Type => InsertType.Append; private XmlDocument XmlDocument { get; } = new XmlDocument(); public TestPrefabExtensionInsertAsSiblingAppendPatch() { XmlDocument.LoadXml(\"<OptionsTabToggle Id=\\\"InsertAsSiblingAppend\\\" />\"); } public override XmlDocument GetPrefabExtension() => XmlDocument; } Example of adding or replacing XML attribute: [PrefabExtension(\"SetAttribute\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children/OptionsTabToggle[@Id='SetAttribute']\")] internal class TestPrefabExtensionSetAttributePatch : PrefabExtensionSetAttributePatch { public override string Id => \"SetAttribute\"; public override string Attribute => \"CustomAttribute\"; public override string Value => \"Value\"; } Example of inserting XML before a specific element: [PrefabExtension(\"InsertAsSiblingPrepend\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children/OptionsTabToggle[@Id='InsertAsSibling']\")] internal class TestPrefabExtensionInsertAsSiblingPrependPatch : PrefabExtensionInsertAsSiblingPatch { public override string Id => \"InsertAsSiblingPrepend\"; public override InsertType Type => InsertType.Prepend; private XmlDocument XmlDocument { get; } = new XmlDocument(); public TestPrefabExtensionInsertAsSiblingPrependPatch() { XmlDocument.LoadXml(\"<OptionsTabToggle Id=\\\"InsertAsSiblingPrepend\\\" />\"); } public override XmlDocument GetPrefabExtension() => XmlDocument; } In order to add data to the prefab, you need to add properties to the target datasource class, this is done by making a mixin class, inheriting from BaseViewModelMixin<T> and marking it with ViewModelMixin attribute. This class will be mixed in to the target view model T , making fields and methods accessible in the prefab: [ViewModelMixin] public class OptionsVMMixin : BaseViewModelMixin<OptionsVM> { private readonly ModOptionsVM _modOptions; [DataSourceProperty] public ModOptionsVM ModOptions { get { return _modOptions; } } public OptionsVMMixin(OptionsVM vm) : base(vm) { _modOptions = new ModOptionsVM(); } [DataSourceMethod] public void ExecuteCloseOptions() { ModOptions.ExecuteCancelInternal(false); ViewModel?.ExecuteCloseOptions(); } } The last thing is to call UIExtender.Register and UIExtender.Enable to apply your extensions: public class CustomSubModule : MBSubModuleBase { protected override void OnSubModuleLoad() { base.OnSubModuleLoad(); _extender = new UIExtender(\"ModuleName\"); _extender.Register(typeof(CustomSubModule).Assembly); _extender.Enable(); } } To use the OnRefresh overload you will need to specify for UIExtenderEx the underlying method that acts as the conceptual 'Refresh' method in the ViewModel . For example, MapInfoVM has a method Refresh . If such method exists, specify it in the ViewModelMixin like this: [ViewModelMixin(\"Refresh\")] // or [ViewModelMixin(nameof(MapInfoVM.Refresh))] // if the method is public public class MapInfoMixin : BaseViewModelMixin<MapInfoVM> Examples Bannerlord.MBOptionScreen Yet Another Party Organiser"
  },
  "articles/v2/Examples.html": {
    "href": "articles/v2/Examples.html",
    "title": "Examples | UIExtenderEx Documentation",
    "keywords": "Examples Mod Configuration Menu Settlement Icons Yet Another Party Organiser"
  },
  "articles/v2/Overview.html": {
    "href": "articles/v2/Overview.html",
    "title": "Quickstart | UIExtenderEx Documentation",
    "keywords": "Quickstart See here for the PrefabsV1 API documentation. Version 2 of the API builds off of the the concepts of the original API, but offers a bit more versatility, and aggregates some of the original prefab types to offer a (hopefully) simpler API. All UIExtenderEx patch classes must be flagged with a PrefabExtensionAttribute . The first parameter is the name of the Movie (the name of the xml file) that your patch targets. The second parameter is an XPath used to specify the node you wish to target inside of the targetted Movie. For those of you who are unfamiliar with XPath: Tutorial Cheatsheet"
  },
  "articles/v2/PrefabExtensionInsertPatch.html": {
    "href": "articles/v2/PrefabExtensionInsertPatch.html",
    "title": "PrefabExtensionInsertPatch | UIExtenderEx Documentation",
    "keywords": "PrefabExtensionInsertPatch Versatile patch that can be used to Prepend, Append, Replace (entirely, or while keeping children) or AddAsChild. Insertion type is determined by the Type Property. Your class insertion patch class should contain a single Property or Method flagged with one of the attributes inheriting from PrefabExtensionContent . Supported types are the following: XmlDocument XmlNode IEnumerable<XmlNode> string (can represent either a file name ( PrefabExtensionFileName ), or Xml ( PrefabExtensionText )) The Attribute you use will depend on the return type of the method, or the type of the property that it is associated with. See PrefabExtensionInsertPatch.cs for the full documentation. Example of prepending the content of an XmlDocument: [PrefabExtension( \"ExampleFile\", \"descendant::Widget[@Id='OptionsScreenWidget']/Children/OptionsTabToggle\" )] internal class PrependExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.Prepend; private XmlDocument document; public TestPrefabExtensionReplacePatch() { document = new XmlDocument(); document.LoadXml(\"<OptionsTabToggle Id=\\\"PrependedTabToggle\\\"><SomeChild/></OptionsTabToggle>\"); } [PrefabExtensionXmlDocument] public XmlDocument GetPrefabExtension() => document; } <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle/> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle Id=\"PrependedTabToggle\"> <SomeChild/> </OptionsTabToggle> <OptionsTabToggle/> </Children> </OptionsScreenWidget> </Window> </Prefab> Example of appending an XmlNode: [PrefabExtension( \"ExampleFile\", \"descendant::Widget[@Id='OptionsScreenWidget']/Children/OptionsTabToggle\" )] internal class AppendExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.Append; private XmlDocument document; public TestPrefabExtensionReplacePatch() { document = new XmlDocument(); document.LoadXml(\"<OptionsTabToggle Id=\\\"AppendedTabToggle\\\"/>\"); } [PrefabExtensionXmlNode] public XmlNode GetPatchContent() => document.DocumentElement; } <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle/> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle/> <OptionsTabToggle Id=\"AppendedTabToggle\"/> </Children> </OptionsScreenWidget> </Window> </Prefab> Example of adding multiple XmlNodes as children: [PrefabExtension( \"ExampleFile\", \"descendant::Widget[@Id='OptionsScreenWidget']/Children\" )] internal class AddAsChildrenExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.Child; // When the InsertType is set to InsertType.Child, determines the index the patch should occupy in the target node's child list. // Default is 0 (patch would be the first child). public override int Index => 1; private List<XmlNode> nodes; public TestPrefabExtensionReplacePatch() { XmlDocument firstChild = new XmlDocument(); firstChild.LoadXml(\"<OptionsTabToggle Id=\\\"InsertedFirstChild\\\"><Children><InnerChild/></Children></OptionsTabToggle>\"); XmlDocument secondChild = new XmlDocument(); secondChild.LoadXml(\"<OptionsTabToggle Id=\\\"InsertedSecondChild\\\"/>\"); nodes = new List<XmlNode> {firstChild, secondChild}; } // Just to demonstrate that both Properties and Methods are supported. [PrefabExtensionXmlNodes] public IEnumerable<XmlNode> Nodes => nodes; } <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle Id=\"ExistingFirstChild\"/> <OptionsTabToggle Id=\"ExistingSecondChild\"/> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle Id=\"ExistingFirstChild\"> <OptionsTabToggle Id=\"InsertedFirstChild\"> <Children> <InnerChild/> </Children> </OptionsTabToggle> <OptionsTabToggle Id=\"InsertedSecondChild\"/> <OptionsTabToggle Id=\"ExistingSecondChild\"> </Children> </OptionsScreenWidget> </Window> </Prefab> Example of replacing a node: [PrefabExtension( \"ExampleFile\", \"descendant::Widget[@Id='OptionsScreenWidget']/Children/OptionsTabToggle\" )] internal class ReplaceNodeExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.Replace; [PrefabExtensionText] public string GetReplacementPatch => \"<Widget Id=\\\"ReplacementNode\\\"/>\"; } <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle> <Children> <SomeChild/> </Children> </OptionsTabToggle> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <Widget Id=\"ReplacementNode\"/> </Children> </OptionsScreenWidget> </Window> </Prefab> Example of replacing a node while keeping its children: [PrefabExtension( \"ExampleFile\", \"descendant::Widget[@Id='OptionsScreenWidget']/Children/OptionsTabToggle\" )] internal class ReplaceNodeExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.ReplaceKeepChildren; // When the InsertType is set to InsertType.ReplaceKeepChildren, determines which new node should inherit the target node's children. // Only applicable when multiple nodes are inserted. public override int Index => 1; private IEnumerable<XmlNode> nodes; [PrefabExtensionXmlNodes] public IEnumerable<XmlNode> GetNodes() { if(nodes is null) { XmlDocument document = new XmlDocument(); document.LoadXml(\"<DiscardedRoot><Widget Id=\\\"FirstChild\\\"/><Widget Id=\\\"SecondChild\\\"/><Widget Id=\\\"ThirdChild\\\"/></DiscardedRoot>\") // We discard the \"DiscardedRoot\" node by only fetching its children. nodes = document.DocumentElement.ChildNodes.Cast<XmlNode>(); } return nodes; } } <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle> <Children> <SomeChild/> </Children> </OptionsTabToggle> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <Widget Id=\"FirstChild\"/> <Widget Id=\"SecondChild\"> <Children> <SomeChild/> </Children> </Widget> <Widget Id=\"ThirdChild\"/> </Children> </OptionsScreenWidget> </Window> </Prefab> Inserting multiple children at the \"root\" level like in the above example can be tidier by using the \"RemoveRootNode\" parameter available with the following attribute types: PrefabExtensionFileName PrefabExtensionText PrefabExtensionXmlNode PrefabExtensionXmlDocument Example of using RemoveRootNode. The result will be the same as the example above: [PrefabExtension( \"ExampleFile\", \"descendant::Widget[@Id='OptionsScreenWidget']/Children/OptionsTabToggle\" )] internal class ReplaceNodeExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.ReplaceKeepChildren; public override int Index => 1; // Setting \"RemoveRootNode\" to true. [PrefabExtensionText(true)] public string GetContent() => \"<DiscardedRoot><Widget Id=\\\"FirstChild\\\"/><Widget Id=\\\"SecondChild\\\"/><Widget Id=\\\"ThirdChild\\\"/></DiscardedRoot>\"; } PrefabExtensionInsertPatch also supports fetching and inserting xml from a file inside of your module's GUI folder. The biggest advantage of doing this is being able to perform live debugging on your injected patch! Example of appending the content of a file using PrefabExtensionFileName : [PrefabExtension( \"ExampleFile\", \"descendant::Widget[@Id='OptionsScreenWidget']/Children/OptionsTabToggle\" )] internal class ReplaceNodeExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.Append; // The file should have an extension of type .xml, and be located inside of the GUI folder of your module. // You can include or omit the extension type. I.e. both of the following would work: // ExampleFileInjectedPatch // ExampleFileInjectedPatch.xml [PrefabExtensionFileName] public string PatchFileName => \"ExampleFileInjectedPatch\"; } <!-- ExampleFileInjectedPatch.xml --> <Widget Id=\"InjectedWidget\"> <Children> <SomeOtherChild/> </Children> </Widget> <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle> <Children> <SomeChild/> </Children> </OptionsTabToggle> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle> <Children> <SomeChild/> </Children> </OptionsTabToggle> <Widget Id=\"InjectedWidget\"> <Children> <SomeOtherChild/> </Children> </Widget> </Children> </OptionsScreenWidget> </Window> </Prefab>"
  },
  "articles/v2/PrefabExtensionSetAttributePatch.html": {
    "href": "articles/v2/PrefabExtensionSetAttributePatch.html",
    "title": "PrefabExtensionSetAttributePatch | UIExtenderEx Documentation",
    "keywords": "PrefabExtensionSetAttributePatch Patch that adds or replaces a node's attributes. The target node should be specified by the XPath in the PrefabExtension If the attribute already exists on the target node, it's value will be replaced by the specified value. Otherwise, the new attribute is added with the specified value. Example of adding multiple attributes: [PrefabExtension( \"ExampleFile\", \"descendant::Widget[@Id='OptionsScreenWidget']/Children/OptionsTabToggle\" )] internal class AddMultipleAttributesExamplePatch : PrefabExtensionSetAttributePatch { public override List<Attribute> Attributes => new() { new Attribute( \"IsVisible\", \"@IsDefaultCraftingMenuVisible\" ), new Attribute( \"IsEnabled\", \"true\" ) }; } <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle IsVisible=\"true\"/> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle IsVisible=\"@IsDefaultCraftingMenuVisible\" IsEnabled=\"true\"/> </Children> </OptionsScreenWidget> </Window> </Prefab>"
  },
  "articles/v2/ViewModelMixin.html": {
    "href": "articles/v2/ViewModelMixin.html",
    "title": "ViewModelMixin | UIExtenderEx Documentation",
    "keywords": "ViewModelMixin In order to add data to the prefab, you need to add properties to the target datasource class, this is done by making a mixin class, inheriting from BaseViewModelMixin<T> and marking it with ViewModelMixin attribute. This class will be mixed in to the target view model T , making fields and methods accessible in the prefab: [ViewModelMixin] public class OptionsVMMixin : BaseViewModelMixin<OptionsVM> { private readonly ModOptionsVM _modOptions; [DataSourceProperty] public ModOptionsVM ModOptions { get { return _modOptions; } } public OptionsVMMixin(OptionsVM vm) : base(vm) { _modOptions = new ModOptionsVM(); } [DataSourceMethod] public void ExecuteCloseOptions() { ModOptions.ExecuteCancelInternal(false); ViewModel?.ExecuteCloseOptions(); } } The last thing is to call UIExtender.Register and UIExtender.Enable to apply your extensions: public class CustomSubModule : MBSubModuleBase { protected override void OnSubModuleLoad() { base.OnSubModuleLoad(); _extender = new UIExtender(\"ModuleName\"); _extender.Register(typeof(CustomSubModule).Assembly); _extender.Enable(); } } To use the OnRefresh overload you will need to specify for UIExtenderEx the underlying method that acts as the conceptual 'Refresh' method in the ViewModel . For example, MapInfoVM has a method Refresh . If such method exists, specify it in the ViewModelMixin like this: [ViewModelMixin(\"Refresh\")] // or [ViewModelMixin(nameof(MapInfoVM.Refresh))] // if the method is public public class MapInfoMixin : BaseViewModelMixin<MapInfoVM>"
  },
  "index.html": {
    "href": "index.html",
    "title": "Bannerlord.UIExtenderEx | UIExtenderEx Documentation",
    "keywords": "Bannerlord.UIExtenderEx A library that enables multiple mods to alter standard game interface. Previously, a fork of UIExtenderLib that was de-forked. Installation This module should be one of the highest in loading order. Ideally, it should be loaded after Bannerlord.Harmony or Bannerlord.ButterLib . For Players This mod is a dependency mod that does not provide anything by itself. You need to additionaly install mods that use it. Usage Check the Articles section of our documentation!"
  }
}